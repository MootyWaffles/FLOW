/* Sample program: I use a graph to simulate a DFA. 
This DFA represents all strings of a's and b's with 
an even number of a's and an even number of b's. */

/* Solver Section */

/* This function simulates the dfa specified above on its parameter input string */

//precondition: dfa, e.g. every character in
//the alphabet is represented uniquely by an out-arc on each node

use 'DFA.flowt';

function simulate(string input) { 
    @current = Graph.START; 
    print "The first current variable is set.";

    print "Entering the for loop to look through the arcs.";

    int i = 0;
    while(i < input.length) {
	Arc next;
	List of Arc pathLst = current.arcsOut();
	
	int j = 0;
	while(j < pathLst.length)
	{
	    Arc connected = pathLst[j];
	    if(connected.symbol == input.substring(i, i+1)
	    {
		next = connected;
		print "Went to the next edge.";
	    }
	    j++;
	}

	if (next) {
	    print "Navigating to the node at the end of that edge.";
	    current = next.to;
	}
	else {
	    print "There was a problem.  Now exiting.";
	    return 0;
	}
	i = i + 1;
    }

    if (current.isAccepting) {
    	return 1;
    }
	
    return 0;
}

/* All code not within a function definition will execute every time */

string input = "Hello World";
print "Input is '" + input + "'\n"; 

if (simulate(input)) {
	print "Input is accepted.\n";
}
else print "Input is not accepted.\n";